/* Generated By:JavaCC: Do not edit this line. SelectSamplesParser.java */
package fr.inserm.umr915.knime4ngs.nodes.vcf.selectsamples.parser;
import java.util.*;


/**
 * ExprLangParser
 */
public class SelectSamplesParser implements SelectSamplesParserConstants {
    public abstract class Node
      {
      public abstract boolean eval(Set<String> samples);
      @Override
      public abstract String toString();

      }

    public class NotNode extends Node
      {
      private Node child;
    NotNode(Node child)
      {
      this.child=child;
      }
       @Override
       public boolean eval(Set<String> samples)
           {
           return !child.eval(samples);
           }
      @Override
      public String toString()
         {
         return "NOT("+ child.toString()+")";
         }

      }



    public class Sample extends Node
      {
      private String name;
      public Sample(String name)
         {
         this.name=name;
         }
        @Override
       public boolean eval(Set<String> samples)
           {
           return samples.contains(name);
           }
      public String toString()
         {
         return this.name;
         }

      }



    public abstract class YNode
      extends Node
      {
      List<Node> children=new ArrayList<Node>();
      }

    public class AndNode
      extends YNode
      {
      @Override
      public boolean eval(Set<String> samples)
           {
           for(Node c: children)
            {
            if(!c.eval(samples)) return false;
            }
        return true;
           }


      @Override
      public String toString()
         {
         StringBuilder b=new StringBuilder();
         b.append("(");
         for(int i=0;i< children.size();++i)
            {
            if(i>0) b.append(" AND ");
            b.append(children.get(i).toString());
            }
         b.append(")");
         return b.toString();
         }
      }
    public class OrNode
      extends YNode
      {
       @Override
      public boolean eval(Set<String> samples)
           {
           for(Node c: children)
            {
            if(c.eval(samples)) return true;
            }
        return false;
           }

      @Override
      public String toString()
         {
         StringBuilder b=new StringBuilder();
         b.append("(");
         for(int i=0;i< children.size();++i)
            {
            if(i>0) b.append(" OR ");
            b.append(children.get(i).toString());
            }
         b.append(")");
         return b.toString();
         }
      }

    private String unescape(String s)
        {
        StringBuilder b=new StringBuilder();
        s=s.substring(1,s.length()-1);
        for(int i=0;i< s.length();++i)
            {
            if(s.charAt(i)=='\u005c\u005c' && i+1 < s.length())
                {
                i++;
                }

            b.append(s.charAt(i));
            }
        return b.toString();
        }


    public static void main(String args[])
      {
      try
         {
         Node n=new SelectSamplesParser(System.in).input();
         Set<String> set=new HashSet<String>();
         set.add("A");
         set.add("B");
         System.out.println(n.eval(set));
         }
      catch(Throwable err)
         {
         err.printStackTrace();
         }
      }

  final public Node input() throws ParseException {
   Node n;
    n = expr();
    jj_consume_token(0);
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final private Node expr() throws ParseException {
    boolean negate=false;
    Node node=null;
    OrNode orNode=null;
    AndNode andNode=null;
    Node leftN;
    Node rightN;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
             negate=true;
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      leftN = expr();
                       node=leftN;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          jj_consume_token(OR);
          rightN = expr();
                               orNode=new OrNode(); node=orNode;  orNode.children.add(leftN); orNode.children.add(rightN);
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OR:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_1;
            }
            jj_consume_token(OR);
            rightN = expr();
                               orNode.children.add(rightN);
          }
          break;
        case AND:
          jj_consume_token(AND);
          rightN = expr();
                                andNode=new AndNode(); node=andNode;  andNode.children.add(leftN); andNode.children.add(rightN);
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case AND:
              ;
              break;
            default:
              jj_la1[2] = jj_gen;
              break label_2;
            }
            jj_consume_token(AND);
            rightN = expr();
                                andNode.children.add(rightN);
          }
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      break;
    case SIMPLE_QUOTE_LITERAL:
    case DOUBLE_QUOTE_LITERAL:
    case IDENTIFIER:
      node = sample();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return negate ? new NotNode(node):node;}
    throw new Error("Missing return statement in function");
  }

  final private Sample sample() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                      {if (true) return new Sample(t.image);}
      break;
    case SIMPLE_QUOTE_LITERAL:
      t = jj_consume_token(SIMPLE_QUOTE_LITERAL);
                                {if (true) return new Sample(unescape(t.image));}
      break;
    case DOUBLE_QUOTE_LITERAL:
      t = jj_consume_token(DOUBLE_QUOTE_LITERAL);
                                {if (true) return new Sample(unescape(t.image));}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SelectSamplesParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,0x4000,0x2000,0x6000,0x6000,0x8700,0x8300,};
   }

  /** Constructor with InputStream. */
  public SelectSamplesParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SelectSamplesParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SelectSamplesParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SelectSamplesParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SelectSamplesParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SelectSamplesParser(SelectSamplesParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SelectSamplesParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

    }
