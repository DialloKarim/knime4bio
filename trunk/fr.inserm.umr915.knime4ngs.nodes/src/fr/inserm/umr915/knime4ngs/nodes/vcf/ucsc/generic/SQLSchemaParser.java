/* Generated By:JavaCC: Do not edit this line. SQLSchemaParser.java */
package fr.inserm.umr915.knime4ngs.nodes.vcf.ucsc.generic;
import java.util.*;
import java.io.*;

public class SQLSchemaParser implements SQLSchemaParserConstants {
        public static class Table
                        {
        				public String uri=null;
                        public String name;
                        public List<Column> columns=new ArrayList<Column>();
                        public int findColumnIndex(String name)
                                {
                                for(int i=0;i< columns.size();++i)
                                        {
                                        Column c=columns.get(i);
                                        if(c.name.equalsIgnoreCase(name)) return i;
                                        }
                                return -1;
                                }
                        public Column findColumn(String name)
                                {
                                int i=findColumnIndex(name);
                                if(i==-1) return null;
                                return columns.get(i);
                                }
                        public boolean contains(String name)
                                {
                                return findColumnIndex(name)!=-1;
                                }
                        public Column get(int i)
                                {
                                return columns.get(i);
                                }
                        }

        public static class Column
                        {
                        String name;
                        boolean nil;
                         Class<?> type;
                        }
    private Table theTable=null;

  final public Table input() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DROP:
      case CREATE:
      case USE:
      case SET:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DROP:
        drop();
        break;
      case SET:
        set();
        break;
      case CREATE:
        create();
        break;
      case USE:
        use();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
                {if (true) return theTable;}
    throw new Error("Missing return statement in function");
  }

  final private void use() throws ParseException {
    jj_consume_token(USE);
    identifier();
    jj_consume_token(SEMICOLON);
  }

  final private void create() throws ParseException {
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATABASE:
      createDatabase();
      break;
    case TABLE:
    case TEMPORARY:
      createTable();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  final private void drop() throws ParseException {
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(EXISTS);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    identifier();
    jj_consume_token(SEMICOLON);
  }

  final private void set() throws ParseException {
    jj_consume_token(SET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER1:
    case IDENTIFIER2:
      identifier();
      break;
    case VARIABLE:
      jj_consume_token(VARIABLE);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER1:
    case IDENTIFIER2:
      identifier();
      break;
    case VARIABLE:
      jj_consume_token(VARIABLE);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  final private void createDatabase() throws ParseException {
                               String s;
    jj_consume_token(DATABASE);
    s = identifier();

  }

  final private void createTable() throws ParseException {
                            this.theTable= new Table(); String tableName; Column col=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEMPORARY:
      jj_consume_token(TEMPORARY);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(TABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(NOT);
      jj_consume_token(EXISTS);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    tableName = identifier();
    jj_consume_token(LPAR);
    col = component();
                           if(col!=null) this.theTable.columns.add(col);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      col = component();
                                   if(col!=null) this.theTable.columns.add(col);
    }
    jj_consume_token(RPAR);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULTVALUE:
      case AUTO_INCREMENT:
      case INT:
      case IDENTIFIER1:
      case IDENTIFIER2:
      case EQ:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER1:
      case IDENTIFIER2:
        identifier();
        break;
      case AUTO_INCREMENT:
        jj_consume_token(AUTO_INCREMENT);
        break;
      case EQ:
        jj_consume_token(EQ);
        break;
      case DEFAULTVALUE:
        jj_consume_token(DEFAULTVALUE);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                this.theTable.name = tableName;
  }

  final private Column component() throws ParseException {
                            Column c=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEY:
    case UNIQUE:
    case PRIMARY:
      key();
      break;
    case IDENTIFIER1:
    case IDENTIFIER2:
      c = column();
                       {if (true) return c;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final private void key() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIQUE:
    case PRIMARY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIQUE:
        jj_consume_token(UNIQUE);
        break;
      case PRIMARY:
        jj_consume_token(PRIMARY);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(KEY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER1:
    case IDENTIFIER2:
      identifier();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(LPAR);
    identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      integer();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        jj_consume_token(LPAR);
        integer();
        jj_consume_token(RPAR);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    }
    jj_consume_token(RPAR);
  }

  final private Column column() throws ParseException {
                         Column c=new Column();String s; Class<?> javaType=null;boolean nil=true;
    s = identifier();
    javaType = colType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case NULL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
                                     nil=false;
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(NULL);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTO_INCREMENT:
      jj_consume_token(AUTO_INCREMENT);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULTVALUE:
      jj_consume_token(DEFAULTVALUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
        jj_consume_token(NULL);
        break;
      case CURRENT_TIMESTAMP:
        jj_consume_token(CURRENT_TIMESTAMP);
        break;
      case SIMPLE_QUOTE_LITERAL:
      case DOUBLE_QUOTE_LITERAL:
        quoted();
        break;
      case INT:
        integer();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON:
      onUpdate();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
          c.name=s;
          c.type=javaType;
          c.nil=nil;
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final private void onUpdate() throws ParseException {
    jj_consume_token(ON);
    jj_consume_token(UPDATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
      break;
    case CURRENT_TIMESTAMP:
      jj_consume_token(CURRENT_TIMESTAMP);
      break;
    case SIMPLE_QUOTE_LITERAL:
    case DOUBLE_QUOTE_LITERAL:
      quoted();
      break;
    case INT:
      integer();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private Class<?> colType() throws ParseException {
                            Class<?> t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARCHAR:
    case CHAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARCHAR:
        jj_consume_token(VARCHAR);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        dimension();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER:
        charset();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
                                                             t=String.class;
      break;
    case LONGBLOB:
    case BLOB:
    case MEDIUMBLOG:
    case TEXT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONGBLOB:
        jj_consume_token(LONGBLOB);
        break;
      case MEDIUMBLOG:
        jj_consume_token(MEDIUMBLOG);
        break;
      case BLOB:
        jj_consume_token(BLOB);
        break;
      case TEXT:
        jj_consume_token(TEXT);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                     t=String.class;
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        dimension();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED:
      case SIGNED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIGNED:
          jj_consume_token(SIGNED);
          break;
        case UNSIGNED:
          jj_consume_token(UNSIGNED);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
                                                             t=Integer.class;
      break;
    case SMALLINT:
    case TINYINT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SMALLINT:
        jj_consume_token(SMALLINT);
        break;
      case TINYINT:
        jj_consume_token(TINYINT);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        dimension();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED:
      case SIGNED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIGNED:
          jj_consume_token(SIGNED);
          break;
        case UNSIGNED:
          jj_consume_token(UNSIGNED);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
                                                                          t=Integer.class;
      break;
    case DATETIME:
    case TIMESTAMP:
    case DATE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATETIME:
        jj_consume_token(DATETIME);
        break;
      case DATE:
        jj_consume_token(DATE);
        break;
      case TIMESTAMP:
        jj_consume_token(TIMESTAMP);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                            t=String.class;
      break;
    case ENUM:
      jj_consume_token(ENUM);
      stringset();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER:
        charset();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
                                              t=String.class;
      break;
    case SET:
      jj_consume_token(SET);
      stringset();
                               t=String.class;
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
                     t= Double.class;
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
                      t= Double.class;
      break;
    case BIGINT:
      jj_consume_token(BIGINT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        dimension();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED:
      case SIGNED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIGNED:
          jj_consume_token(SIGNED);
          break;
        case UNSIGNED:
          jj_consume_token(UNSIGNED);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
                                                             t=String.class;
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final private void stringset() throws ParseException {
    jj_consume_token(LPAR);
    quoted();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      quoted();
    }
    jj_consume_token(RPAR);
  }

  final private void charset() throws ParseException {
    jj_consume_token(CHARACTER);
    jj_consume_token(SET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER1:
    case IDENTIFIER2:
      identifier();
      break;
    case SIMPLE_QUOTE_LITERAL:
    case DOUBLE_QUOTE_LITERAL:
      quoted();
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLLATE:
      jj_consume_token(COLLATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER1:
      case IDENTIFIER2:
        identifier();
        break;
      case SIMPLE_QUOTE_LITERAL:
      case DOUBLE_QUOTE_LITERAL:
        quoted();
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
  }

  final private void dimension() throws ParseException {
    jj_consume_token(LPAR);
    integer();
    jj_consume_token(RPAR);
  }

  final private String identifier() throws ParseException {
                             Token t;String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER1:
      t = jj_consume_token(IDENTIFIER1);
                         s=t.image;
      break;
    case IDENTIFIER2:
      t = jj_consume_token(IDENTIFIER2);
                           s=t.image.substring(1,t.image.length()-1);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final private int integer() throws ParseException {
                       Token t;
    t = jj_consume_token(INT);
                  {if (true) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final private String quoted() throws ParseException {
                         Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIMPLE_QUOTE_LITERAL:
      t = jj_consume_token(SIMPLE_QUOTE_LITERAL);
                                     {if (true) return t.image;}
      break;
    case DOUBLE_QUOTE_LITERAL:
      t = jj_consume_token(DOUBLE_QUOTE_LITERAL);
                                     {if (true) return t.image;}
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SQLSchemaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[48];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200e0,0x200e0,0x700,0x800,0x0,0x0,0x200,0x800,0x0,0x1400000,0x1400000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0xc000,0x1000000,0x808000,0x400000,0x1000,0x808000,0x300000,0x0,0x0,0x6000000,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0xc0000000,0x0,0x0,0x0,0x0,0xfe360000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80000,0x80000,0x0,0x0,0x38000,0x38000,0x0,0x0,0x400000,0x5c000,0x5c000,0x18300,0x300,0x300,0x18000,0x100000,0x400000,0x100000,0x0,0x0,0x0,0x3004000,0x0,0x0,0x3004000,0x0,0x100000,0x400,0x28,0x100000,0xc0,0xc0,0x10,0x100000,0xc0,0xc0,0x1,0x400,0x100000,0xc0,0xc0,0x3f,0x400000,0x3018000,0x3018000,0x800,0x18000,0x3000000,};
   }

  /** Constructor with InputStream. */
  public SQLSchemaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLSchemaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLSchemaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SQLSchemaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLSchemaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLSchemaParser(SQLSchemaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLSchemaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 48; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
